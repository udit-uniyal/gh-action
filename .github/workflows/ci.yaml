name: Runtime-risks
on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  Tests:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:

      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: true

## Documents should contain desc. of all these fields and how to generate and store the baseline
## Set of examples [With all the fields]
##FAQs:
## - My app. creates temp files and I need to ignore those files, what should be the solution here?
## - I want my CI to pass, but still generate the report
## - I want to only list Process, file or syscall events, what should I do?
## TODO: Create similar action for k8tls
#
#      - name: Kubearmor action [2 Actions]
#        uses: accuknox-action@semver
#        with:
#          kubearmor-image: stable[IMAGE_NAME]
#          discovery-engine: stable[IMAGE_NAME]
#          workload-namespace: [""] [Phase 2]
#          license-key: "string"[Secrets] [Phase 2]
#          user-id: "" [Phase 2]
#
#      - name: Kubearmor action to generate report[2 Actions]
#        uses: accuknox-report@semver
#        with:
#          baseline-report-path: "" [Github]
#          labels: "" ["kubearmor-app: kubearmor-relay"]
#          operation: ""[Process, file, Network, Syscall]
#          container-name: "" []
#          namespaces: [""]
#          workloads: ["deployment/mysql","statefulsets/vault","deployment/*"]
#          source: ""
#          process-ignore-paths: "/sbin" [Regex]
#          file-ignore-paths: "/sbin" [Regex]
#          ignore-return-code: true/false
#          view: tabular/ [Phase 2]


      #      - name: Installing Prerequisites (Kind Cluster)
#        uses: helm/kind-action@v1.4.0

      - name: Checkout kubearmor repo
        uses: actions/checkout@v3
        with:
          repository: kubearmor/KubeArmor
          ref: main
          path: Kubearmor

      - name: Checkout Discovery engine repo
        uses: actions/checkout@v3
        with:
          repository: accuknox/discovery-engine
          ref: dev
          path: discovery-engine

      - uses: actions/setup-go@v3
        with:
          go-version: "v1.20"

#      - name: Install the latest LLVM toolchain
#        run: ./Kubearmor/.github/workflows/install-llvm.sh
#
#      - name: Compile libbpf
#        run: |
#          ls
#          cd Kubearmor
#          ls
#          cd KubeArmor/BPF
#          git submodule update --init --recursive
#          ls
#          make -C libbpf/src

      - name: Setup a Kubernetes environment
        run: ./Kubearmor/contribution/k3s/install_k3s.sh

      - name: Configuring and testing the Installation for cluster
        run: |
          kubectl wait --for=condition=Ready nodes --all --timeout=120s
          sudo apt install socat

      - name: Checkout accuknox-cli repo
        uses: actions/checkout@v3
        with:
          repository: rajaSahil/accuknox-cli
          ref: feat-report
          path: accuknox-cli

      - name: Install accuknox-cli, kubearmor and discovery engine
        run: |
          cd accuknox-cli
          ./accuknox-cli version
          ./accuknox-cli install
          kubectl get pods -A
          sleep 100
          kubectl get pods -A

#          kubectl describe -f $(kubectl get pods -l app=discovery-engine -A -o jsonpath='{.items[0].metadata.name}') -n accuknox-agents


      - name: Deploy test application
        run: |
          kubectl create deployment nginx --image=nginx
          POD=$(kubectl get pod -l app=nginx -o name)

      - name: Install helm and kube-prometheus-stack
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install kps prometheus-community/kube-prometheus-stack

#      - name: Test KubeArmor using Ginkgo
#        run: |
#          cd Kubearmor
#          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
#          make -C tests/
#        timeout-minutes: 30

#      - name: Test Discovery engine using Ginkgo
#        run: |
#          curl -sfL http://get.kubearmor.io/ | sudo sh -s -- -b /usr/local/bin
#          cd discovery-engine/tests
#          go mod tidy
#          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
#          ginkgo -r
#        timeout-minutes: 30

      - name: Generate report
        run: |
          kubectl get pods -A
          sleep 200
          kubectl get pods -A
          mkdir downloads
          touch table
          ./accuknox-cli/accuknox-cli report -b "baseline/report.json" > downloads/table
          cat downloads/table
          mv /tmp/report-*.json downloads/report.json
          mv /tmp/diff-report-*.json downloads/diff-report.json
          mv /tmp/diff-report-*.md downloads/diff-report.md


      - name: Upload artifects
        uses: actions/upload-artifact@v2
        with:
          name: Baseline report
          path: downloads

      - name: PR comment with file
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: downloads/diff-report.md
name: Trivy CSPM Scan

on:
  pull_request:
    branches:
    - "*"

env:
  DOCKER_IMAGE: "accuknox/bootstrap:testimage"
  DOCKERFILE_CONTEXT: "Dockerfile"
  CSPM_URL: cspm.demo.accuknox.com
  CSPM_TOKEN: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjg4NzMwMzkwLCJqdGkiOiJjODQzMTRhNWEyYmQ0NzY2YjU5MWFmMDc2ZjBhNDA5ZSIsImlzcyI6ImNzcG0uZGVtby5hY2N1a25veC5jb20ifQ.F1YVYl5MSurrjCj1zx2wucyld639M4hdMmWZST7FRx8NH8nVqBA4oF7G-fdNwwAUiL8aflofyrhWo1PgAMHkF4O2OgG3IbgjZbiOeZVJ2BmMq_FMXBu0m_eY9-kCLkVM_iBsGc14CjQxM8xCXxtQS1Wtc67uVFeFzMch3s0mTHI_fvqCqZYMy7qHfSBVOBq8JnJ3ssIos_8BpapgKejysJjEvXA7F8qc9U5GeNfhqQ9IqMfoHW6w4bqk8770i4oGnJ_wZXbYY3RvKqe1BoSmue4-2-UPdEiZbA3IhK4WkUydrhFzDS2ls4A4Jl0sB1O8CmVKuEsrJfCtcCwElrmUQQ"
  TENANT_ID: "11"

jobs:
  accuknox-cicd:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Docker Build
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }} -f ${{ env.DOCKERFILE_CONTEXT }} .

      - name: Download Trivy Vulnerability Scanner
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Run Trivy Vulnerability Scanner
        run: |
          trivy image -f json ${{ env.DOCKER_IMAGE }} -o results.json

      - name: Print Trivy Results
        run: cat results.json

      - name: Push report to CSPM panel
        run: |
          curl --location --request POST 'https://${{env.CSPM_URL}}/api/v1/artifact/?tenant_id=${{ env.TENANT_ID }}&data_type=TR&save_to_s3=false' --header 'Authorization: Bearer ${{ env.CSPM_TOKEN }}' --form 'file=@"./results.json"'
